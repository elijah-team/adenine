# Copyright (c) 1998-2003 Massachusetts Institute of Technology. 
# This code was developed as part of the Haystack research project 
# (http://haystack.lcs.mit.edu/). Permission is hereby granted, 
# free of charge, to any person obtaining a copy of this software 
# and associated documentation files (the "Software"), to deal in 
# the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, 
# sublicense, and/or sell copies of the Software, and to permit 
# persons to whom the Software is furnished to do so, subject to 
# the following conditions: 
# 
# The above copyright notice and this permission notice shall be 
# included in all copies or substantial portions of the Software. 
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
# OTHER DEALINGS IN THE SOFTWARE. 
#

# XML Support
# Written by Dennis Quan
# $Header: /home/stefano/haystack/src/adenine/agents/xml.ad,v 1.16 2004/01/06 04:52:14 dquan Exp $

@base <http://haystack.lcs.mit.edu/agents/xml>

@prefix	dc:			<http://purl.org/dc/elements/1.1/>
@prefix	content:	<http://haystack.lcs.mit.edu/schemata/content#>
@prefix	info:		<http://haystack.lcs.mit.edu/schemata/information#>
@prefix	serine:		<http://haystack.lcs.mit.edu/agents/serine#>
@prefix	:			<http://haystack.lcs.mit.edu/agents/xml#>

#############################################################################################
# XML detection

add { :xmlDetector
	rdf:type			serine:Transformation ;
	serine:priority		"true" ;
	serine:precondition	${
		rdf:type			serine:Pattern ;
		serine:existentials	@(?x) ;
		serine:statement	${
			serine:subject		?x ;
			serine:predicate	dc:format ;
			serine:object		"text/xml"
		}
	} ;
	serine:adenineMethod	:handleXML
}

add { :xmlDetector2
	rdf:type			serine:Transformation ;
	serine:priority		"true" ;
	serine:precondition	${
		rdf:type			serine:Pattern ;
		serine:existentials	@(?x) ;
		serine:statement	${
			serine:subject		?x ;
			serine:predicate	dc:format ;
			serine:object		"application/xml"
		}
	} ;
	serine:adenineMethod	:handleXML
}

add { :rdfPattern
	rdf:type	:XMLSignature ;
	:xpath		"*[namespace-uri()=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'][local-name()=\'RDF\']" ;
	:mimeType	"application/rdf+xml"
}

add { :wsdlPattern
	rdf:type	:XMLSignature ;
	:xpath		"*[namespace-uri()=\'http://schemas.xmlsoap.org/wsdl/\'][local-name()=\'definitions\']" ;
	:mimeType	"application/wsdl+xml"
}

add { :rssPattern
	rdf:type	:XMLSignature ;
	:xpath		"rss" ;
	:mimeType	"application/rss+xml"
}

method :handleXML res ; adenine:preload "true" ; adenine:precompile "true"
	importjava "org.apache.xpath" XPathAPI
	
	if (gt (content:getContentSize res) 131072)
		return
	
	= xml (XMLDOM res)
	
	= patterns (query { ?x rdf:type :XMLSignature })
	= found false
	for x in patterns
		= pattern x[0]
		= xpath (extract pattern :xpath ?x)
		= mimeType (extract pattern :mimeType ?x)
		
		= y (XPathAPI.selectSingleNode xml (xpath.getContent))
		if (!= y null)
			add { res dc:format mimeType }
			= found true
			break

	if found
		remove res dc:format "text/xml"
		remove res dc:format "application/xml"

method :doXSLT xslt input ; adenine:preload "true" ; adenine:precompile "true"
	importjava "javax.xml.transform" TransformerFactory
	importjava "javax.xml.transform.stream" StreamSource StreamResult
	importjava "edu.mit.lcs.haystack.content" ContentClient
	= tFactory (TransformerFactory.newInstance)
	= xslSource (StreamSource ((ContentClient.getContentClient xslt __source__ __serviceaccessor__).getContent))
	= xmlSource (StreamSource ((ContentClient.getContentClient input __source__ __serviceaccessor__).getContent))
	= transformer (tFactory.newTransformer xslSource)

	transformer.transform xmlSource (StreamResult __output__)

method :rssInformationExtractor res ; 
dc:title			"RDF Information Extractor for RSS files" ;
rdf:type			info:InformationReader ;
info:targetFormat	"application/rss+xml" ;
adenine:precompile	"true" ;
adenine:preload		"true"
	importjava "java.net" URL
	importjava "edu.mit.lcs.haystack.rdf" Utilities
	importjava "java.io" StringWriter FileWriter PrintWriter
	= buffer (StringWriter)
	with __output__ buffer
		:doXSLT <http://haystack.lcs.mit.edu/data/rss.xslt> res
	Utilities.parseRDF (buffer.toString) __target__

method :wsdlInformationExtractor res ; 
dc:title			"RDF Information Extractor for WSDL files" ;
rdf:type			info:InformationReader ;
info:targetFormat	"application/wsdl+xml" ;
adenine:precompile	"true" ;
adenine:preload		"true"
	importjava "java.net" URL
	importjava "edu.mit.lcs.haystack.rdf" Utilities
	importjava "java.io" StringWriter FileWriter PrintWriter
	= buffer (StringWriter)
	with __output__ buffer
		:doXSLT <http://haystack.lcs.mit.edu/data/wsdl.xslt> res
	Utilities.parseRDF (buffer.toString) __target__

########################################################################
# XSL transformations

add { <http://haystack.lcs.mit.edu/data/rss.xslt>
	rdf:type					content:JavaClasspathContent ;
	content:path			 	"/rss.xslt"
}

add { <http://haystack.lcs.mit.edu/data/wsdl.xslt>
	rdf:type					content:JavaClasspathContent ;
	content:path			 	"/wsdl.xslt"
}
