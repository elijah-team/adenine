# Copyright (c) 1998-2003 Massachusetts Institute of Technology. 
# This code was developed as part of the Haystack research project 
# (http://haystack.lcs.mit.edu/). Permission is hereby granted, 
# free of charge, to any person obtaining a copy of this software 
# and associated documentation files (the "Software"), to deal in 
# the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, 
# sublicense, and/or sell copies of the Software, and to permit 
# persons to whom the Software is furnished to do so, subject to 
# the following conditions: 
# 
# The above copyright notice and this permission notice shall be 
# included in all copies or substantial portions of the Software. 
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
# OTHER DEALINGS IN THE SOFTWARE. 
#

# Operation ontology
# Written by Dennis Quan
# $Header: /home/stefano/haystack/src/adenine/schemata/operation.ad,v 1.18 2003/12/17 17:34:28 dquan Exp $

@base <http://haystack.lcs.mit.edu/schemata/operation>

@prefix	dc:			<http://purl.org/dc/elements/1.1/>
@prefix	hs:			<http://haystack.lcs.mit.edu/schemata/haystack#>
@prefix op:			<http://haystack.lcs.mit.edu/schemata/operation#>
@prefix task:		<http://haystack.lcs.mit.edu/schemata/task#>

#############################################################################################
# Operation ontology

add { ^
	rdf:type	daml:Ontology ;
	dc:title	"Haystack Operation Ontology"
}

add { op:Operation
	rdf:type			rdfs:Class ;
	rdf:type			daml:Class ;
	rdfs:label			"Operation" ;
	rdfs:isDefinedBy	^ ;
	rdfs:subClassOf		adenine:Method
}

add { op:ContextualOperation
	rdf:type			rdfs:Class ;
	rdf:type			daml:Class ;
	rdfs:label			"ContextualOperation" ;
	rdfs:isDefinedBy	^ ;
	rdfs:subClassOf		op:Operation
}

add { op:associatedOperation
	rdf:type			daml:ObjectProperty ;
	rdf:type			hs:RelationalProperty ;
	rdfs:label			"Associated operation" ;
	rdfs:range			op:Operation ;
	rdfs:isDefinedBy	^
}

add { op:closureDomain
	rdf:type			daml:ObjectProperty ;
	rdf:type			hs:RelationalProperty ;
	rdfs:label			"Closure domain" ;
	rdfs:domain			op:Operation ;
	rdfs:range			rdfs:Class ;
	rdfs:isDefinedBy	^
}

add { op:Parameter
	rdf:type			rdfs:Class ;
	rdf:type			daml:Class ;
	rdfs:label			"Parameter" ;
	rdfs:subClassOf		adenine:Parameter ;
	rdfs:isDefinedBy	^
}

add { op:required
	rdf:type			daml:DatatypeProperty ;
	rdf:type			daml:UniqueProperty ;
	rdfs:label			"Required" ;
	rdfs:domain			op:Parameter ;
	rdfs:range			xsd:boolean ;
	rdfs:isDefinedBy	^
}

add { op:primaryParameter
	rdf:type			daml:ObjectProperty ;
	rdfs:label			"Primary parameter" ;
	rdfs:domain			op:Operation ;
	rdfs:range			op:Parameter ;
	rdfs:isDefinedBy	^
}

add { op:condition
	rdf:type			daml:ObjectProperty ;
	rdf:type			hs:ProprietalProperty ;
	rdfs:label			"Condition" ;
	rdfs:isDefinedBy	^ ;
	rdfs:domain			op:Property ;
	rdfs:range			adenine:ConditionSet
}

add { op:adenineCondition
	rdf:type			daml:ObjectProperty ;
	rdf:type			hs:ProprietalProperty ;
	rdfs:label			"Adenine condition" ;
	rdfs:isDefinedBy	^ ;
	rdfs:domain			op:Property ;
	rdfs:range			adenine:Method
}

add { op:defaultValue
	rdf:type			rdf:Property ;
	rdf:type			hs:ProprietalProperty ;
	rdf:type			daml:UniqueProperty ;
	rdfs:isDefinedBy	^ ;
	rdfs:label			"Default value" ;
	rdfs:domain			op:Property
}

add { op:targetExistential
	rdf:type			daml:ObjectProperty ;
	rdf:type			hs:RelationalProperty ;
	rdf:type			daml:UniqueProperty ;
	rdfs:label			"Target existential" ;
	rdfs:isDefinedBy	^ ;
	rdfs:domain			op:Property 
}

add { op:existential
	rdf:type			daml:ObjectProperty ;
	rdf:type			hs:RelationalProperty ;
	rdfs:label			"Existential" ;
	rdfs:isDefinedBy	^ ;
	rdfs:domain			op:Property 
}

add { op:minOccurs
	rdf:type			daml:DatatypeProperty ;
	rdf:type			daml:UniqueProperty ;
	rdf:type			hs:ProprietalProperty ;
	rdfs:label			"Min occurs" ;
	rdfs:isDefinedBy	^ ;
	rdfs:domain			op:Property ;
	rdfs:range			xsd:int
}

add { op:maxOccurs
	rdf:type			daml:DatatypeProperty ;
	rdf:type			daml:UniqueProperty ;
	rdf:type			hs:ProprietalProperty ;
	rdfs:label			"Max occurs" ;
	rdfs:isDefinedBy	^ ;
	rdfs:domain			op:Property ;
	rdfs:range			xsd:int
}

#############################################################################################
# Operation closure

add { op:OperationClosure
	rdf:type			rdfs:Class ;
	rdf:type			daml:Class ;
	rdfs:label			"Operation Closure" ;
	rdfs:subClassOf		task:Task ;
	rdfs:isDefinedBy	^
}

add { op:operation
	rdf:type			daml:ObjectProperty ;
	rdf:type			hs:RelationalProperty ;
	rdfs:label			"Operation" ;
	rdfs:isDefinedBy	^ ;
	rdfs:domain			op:OperationClosure ;
	rdfs:range			op:Operation
}

