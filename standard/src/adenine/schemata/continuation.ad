# Copyright (c) 1998-2003 Massachusetts Institute of Technology. 
# This code was developed as part of the Haystack research project 
# (http://haystack.lcs.mit.edu/). Permission is hereby granted, 
# free of charge, to any person obtaining a copy of this software 
# and associated documentation files (the "Software"), to deal in 
# the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, 
# sublicense, and/or sell copies of the Software, and to permit 
# persons to whom the Software is furnished to do so, subject to 
# the following conditions: 
# 
# The above copyright notice and this permission notice shall be 
# included in all copies or substantial portions of the Software. 
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
# OTHER DEALINGS IN THE SOFTWARE. 
#

# Continuation Ontology
# Written by Dennis Quan, David Huynh
# $Header: /home/stefano/haystack/src/adenine/schemata/continuation.ad,v 1.17 2003/12/17 17:34:27 dquan Exp $

@base <http://haystack.lcs.mit.edu/schemata/continuation>

@prefix	dc:			<http://purl.org/dc/elements/1.1/> 
@prefix	hs:			<http://haystack.lcs.mit.edu/schemata/haystack#> 
@prefix	ozone:		<http://haystack.lcs.mit.edu/schemata/ozone#> 
@prefix	data:		<http://haystack.lcs.mit.edu/schemata/dataProvider#>
@prefix	contui:		<http://haystack.lcs.mit.edu/ui/continuation#> 
@prefix	cont:		<http://haystack.lcs.mit.edu/schemata/continuation#> 
@prefix	task:		<http://haystack.lcs.mit.edu/schemata/task#> 

add { ^
	rdf:type			daml:Ontology ;
	dc:title			"UI Continuation Ontology"
}

#############################################################################################
# Continuation base class

add { cont:Continuation
	rdf:type				rdfs:Class ;
	rdf:type			daml:Class ;
	rdfs:subClassOf		task:Task ;
	rdfs:label			"Continuation" ;
	rdfs:isDefinedBy	^
}

add { cont:validator
	rdf:type			daml:ObjectProperty ;
	rdfs:label			"Validator" ;
	rdfs:domain			cont:Continuation ;
	rdfs:isDefinedBy	^ ;
	rdfs:range			adenine:Method
}

add { cont:acceptor
	rdf:type			daml:ObjectProperty ;
	rdfs:label			"Acceptor" ;
	rdfs:domain			cont:Continuation ;
	rdfs:isDefinedBy	^ ;
	rdfs:range			adenine:Method
}

add { cont:origin
	rdf:type			daml:ObjectProperty ;
	rdfs:label			"Origin" ;
	rdfs:domain			cont:Continuation ;
	rdfs:isDefinedBy	^ ;
	rdfs:range			daml:Thing
}

method cont:getApplicableContinuationsDataSet res ; adenine:precompile "true" ; adenine:preload "true"
	= dataSet (queryExtract { 
		?x cont:target res ; rdf:type cont:ContinuationSetSource 
		?y ozone:dataSource ?x ; rdf:type cont:ContinuationCollectionDataSet
	} @(?y))

	if (!= dataSet null)
		return dataSet[0]

	return${
		rdf:type	data:CollectionDataSet ;
		rdf:type	cont:ContinuationCollectionDataSet ;
		data:dataSource ${
			rdf:type		cont:ContinuationSetSource ;
			cont:target		res
		}
	}

#############################################################################################
# Underlying operation set data provider

add {
	:continuationSetDataProvider
		rdf:type				ozone:Part ;
		rdf:type				data:DataProvider ;
		rdf:type				data:SetDataProvider ;
		ozone:dataDomain		cont:ContinuationSetSource ;
		data:initialize			:continuationSetSourceInitialize ;
		hs:javaImplementation	${ rdf:type hs:JavaClass ; hs:className "edu.mit.lcs.haystack.ozone.data.AdenineDataProvider" }
}

method :continuationSetSourceInitialize dataProvider ; adenine:precompile "true" ; adenine:preload "true"
	= dataSource (__context__.getLocalProperty ozone:partData)
	= target (extract dataSource cont:target ?x)
	= continuations (Set)

	function handler x
		continuations.add x

	contui:listUIContinuations target handler

	dataProvider.cacheData continuations

	__context__.putLocalProperty data:onConsumerRegistered	:continuationSetSourceOnConsumerRegistered
	__context__.putLocalProperty data:getData				:continuationSetSourceGetData

method :continuationSetSourceOnConsumerRegistered dataProvider dataConsumer ; adenine:precompile "true" ; adenine:preload "true"
	dataConsumer.onDataChanged data:setAddition (dataProvider.getCachedData)

method :continuationSetSourceGetData dataProvider dataType specifications ; adenine:precompile "true" ; adenine:preload "true"
	if (or (== dataType null) (== dataType data:set))
		return (dataProvider.getCachedData)

	if (== dataType data:setCount)
		return ((dataProvider.getCachedData).size)

	return null

