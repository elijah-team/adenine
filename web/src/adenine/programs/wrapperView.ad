# Copyright (c) 1998-2003 Massachusetts Institute of Technology. 
# This code was developed as part of the Haystack research project 
# (http://haystack.lcs.mit.edu/). Permission is hereby granted, 
# free of charge, to any person obtaining a copy of this software 
# and associated documentation files (the "Software"), to deal in 
# the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, 
# sublicense, and/or sell copies of the Software, and to permit 
# persons to whom the Software is furnished to do so, subject to 
# the following conditions: 
# 
# The above copyright notice and this permission notice shall be 
# included in all copies or substantial portions of the Software. 
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
# OTHER DEALINGS IN THE SOFTWARE. 
#

# Wrapper views
# Written by Andrew Hogue

@prefix	:		<http://haystack.lcs.mit.edu/schemata/wrapperinduction#> 

@prefix	dc:			<http://purl.org/dc/elements/1.1/>
@prefix	data:		<http://haystack.lcs.mit.edu/schemata/dataProvider#>
@prefix	hs:			<http://haystack.lcs.mit.edu/schemata/haystack#>
@prefix	layout:		<http://haystack.lcs.mit.edu/schemata/layout#>
@prefix	op:			<http://haystack.lcs.mit.edu/schemata/operation#>
@prefix	ozone:		<http://haystack.lcs.mit.edu/schemata/ozone#>
@prefix	slide:		<http://haystack.lcs.mit.edu/schemata/ozoneslide#>

add { :Pattern 		hs:classView	:PatternView }
add { :PatternNode 	hs:classView	:PatternNodeView }

add { :patternViewPart
	rdf:type		ozone:Part ;
	rdf:type		ozone:ViewPart ;
	rdf:type		ozone:InteractiveViewPart ;
	ozone:viewDomain	:PatternView ;
	ozone:dataDomain	:Pattern ;
	ozone:partDataGenerator :presentPatternView ;
	hs:javaImplementation ${
		rdf:type	hs:javaClass ;
		hs:className	"edu.mit.lcs.haystack.ozone.standard.widgets.parts.AdeninePartContainerPart"
	}
}

method :presentPatternView
	= pattern (__context__.getLocalProperty ozone:underlying)
	= root (extract pattern :patternRoot ?x)
	= url (extract pattern :url ?x)
	= class (extract pattern :semanticClass ?x)
	= classLabel (extract class rdfs:label ?x)
	
	return ${
		rdf:type	slide:Paragraph ;
		slide:children @(
			${ 	rdf:type	slide:Span ;
				slide:fontBold	"true" ;
				slide:fontSize	"200%" ;
				slide:children @(
					${	rdf:type	slide:Text ;
						slide:text	"Wrapper:"
					}
				)			
			}
			slide:newLine
			${	rdf:type	slide:Text ;
				slide:text	"Class:"
			}
			slide:space
			${ 	rdf:type	slide:Text ;
				slide:text	classLabel
			}
			slide:space
			slide:newLine
			${	rdf:type	slide:Text ;
				slide:text	"URL:"
			}
			slide:space
			${ 	rdf:type	slide:Text ;
				slide:text	url
			}
			slide:newLine
			${	rdf:type		slide:Block ;
				slide:marginLeft	"16" ;
				slide:child 		root
			}					
		)
	}
			
			


add { :patternNodeViewPart
	rdf:type		ozone:Part ;
	rdf:type		ozone:ViewPart ;
	rdf:type		ozone:InteractiveViewPart ;
	rdf:type		:PatternNodeViewPart ;
	ozone:viewDomain	:PatternNodeView ;
	ozone:dataDomain	:PatternNode ;
	ozone:partDataGenerator :presentPatternNodeView ;
	hs:javaImplementation ${
		rdf:type	hs:javaClass ;
		hs:className	"edu.mit.lcs.haystack.ozone.standard.widgets.parts.AdeninePartContainerPart"
	}
}

method :presentPatternNodeView
	importjava "edu.mit.lcs.haystack.server.extensions.wrapperinduction" WrapperManager

	= node (__context__.getLocalProperty ozone:partData)
	if (== node null)
		= node (__context__.getLocalProperty ozone:underlying)

	= tagName (extract node :tagName ?x)

	= semantics (query { node :semanticResource ?x } @(?x) )
	= semanticList @()
	for x in semantics
		semanticList.add x[0]

	if (== semanticList @())
		= semanticSlide slide:newLine
	else
		= semanticSlide ${
			rdf:type	slide:Span ;
			slide:children @(
				${ 	rdf:type	slide:Text ; slide:text "[" }
				${ 	rdf:type	slide:Text ;
					slide:text	(semanticList[0].getContent)
				}
				${ 	rdf:type	slide:Text ; slide:text "]" }
				slide:newLine
			)
		}



	= childList (WrapperManager.getChildNodes __source__ node)
	= childView slide:null
	if (!= childList @())
		= childView ${	
			rdf:type		slide:Block ;
			slide:marginLeft	"16" ;
			slide:child ${
				rdf:type	layout:Layout ;
				ozone:dataSource ${
					rdf:type 	data:DAMLListSource ;
					data:damlList	childList
				} ;
				layout:layoutConstraint ${
					rdf:type		layout:RowStackerConstraint ;
					ozone:viewPartClass	:PatternNodeViewPart ;
				}
			}
		}

	
	return ${
		rdf:type	slide:Paragraph ;
		slide:children @(
			${ 	rdf:type	slide:Text ;
				slide:text	tagName 
			}
			slide:space 
			semanticSlide
			childView
		)
	}




#########################################
#### View Wrappers

add { :wrappedPage
	rdf:type		op:Parameter ;
	op:required		"true" ;
	rdf:type		daml:UniqueProperty ;
	rdf:type		daml:ObjectProperty ;
	rdfs:label		"Wrapped Page" ;
	rdfs:domain		:Pattern ;
	rdfs:range		:WrappedPage
}

method :viewWrappers :wrappedPage = wrappedPage ;
adenine:preload		"true" ;
dc:description		"Views all wrappers from the given page" ;
op:primaryParameter	:wrappedPage ;
dc:title		"View Wrappers" ;
rdf:type		op:Operation 
	importjava "edu.mit.lcs.haystack.server.extensions.wrapperinduction" WrapperManager
	= patterns (WrapperManager.getPatternResources __source__ (wrappedPage[0].getContent))
	if (!= null patterns)
		if (!= null patterns[0])
			= type (extract patterns[0] rdf:type ?x)
			print (append 'viewing pattern ' patterns[0])
			print (append 'type ' type)
			ozone:navigate patterns[0]

##############################
### Modifications

add { :existingNode
	rdf:type		op:Parameter ;
	op:required		"true" ;
	rdf:type		daml:UniqueProperty ;
	rdf:type		daml:ObjectProperty ;
	rdfs:label		"Existing Node" ;
	rdfs:range		:PatternNode
}

add { :newNode
	rdf:type		op:Parameter ;
	op:required		"true" ;
	rdf:type		daml:UniqueProperty ;
	rdf:type		daml:ObjectProperty ;
	rdfs:label		"New Pattern Node" ;
	rdfs:range		:PatternNode
}

add { :semanticProperty
	rdf:type		op:Parameter ;
	op:required		"true" ;
	rdf:type		daml:UniqueProperty ;
	rdf:type		daml:ObjectProperty ;
	rdfs:label		"Semantic Property" ;
	rdfs:range		rdf:Property
}

#[
method :deleteNode :existingNode = existingNode ;
adenine:preload		"true" ;
dc:description		"Deletes the given Pattern Node" ;
op:primaryParameter	:existingNode ;
dc:title		"Delete Node" ;
rdf:type		op:Operation 
	print '>>> :deleteNode is unimplemented!'



method :prependNode :existingNode = existingNode :newNode = newNode ;
adenine:preload		"true" ;
dc:description		"Inserts a new Pattern Node before the given Pattern Node" ;
op:primaryParameter	:existingNode ;
dc:title		"Prepend Node" ;
rdf:type		op:Operation 
	print '>>> :prependNode is unimplemented!'



method :appendNode :existingNode = existingNode :newNode = newNode ;
adenine:preload		"true" ;
dc:description		"Inserts a new Pattern Node after the given Pattern Node" ;
op:primaryParameter	:existingNode ;
dc:title		"Append Node" ;
rdf:type		op:Operation 
	print '>>> :appendNode is unimplemented!'
#]


method :makeWildcard :existingNode = existingNode ;
adenine:preload		"true" ;
dc:description		"Makes the given Pattern Node a wildcard node" ;
op:primaryParameter	:existingNode ;
dc:title		"Make Wildcard" ;
rdf:type		op:Operation 
	print '>>> :makeWildcard is unimplemented!'



method :addSemanticProperty :existingNode = existingNode :semanticProperty = semanticProperty ;
adenine:preload		"true" ;
dc:description		"Adds a semantic property to the given Pattern Node" ;
op:primaryParameter	:existingNode ;
dc:title		"Add Semantic Property" ;
rdf:type		op:Operation 
	print '>>> :addProperty is unimplemented!'

